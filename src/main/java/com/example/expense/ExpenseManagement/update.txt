add user in category table

no need for delete all

in put mapping get category id from updated category  not in url path

queryparam for getCategories    // @RequestParam

enum for default category for every user


UI ->   login
        user wise display expenses
                  categories
                  budgets starts with 0.0


dozermapper -> entity to dto// xmlconfiguration



    @Query("Select COALESCE(SUM(e.amount), 0) from Expense e inner join e.user u where u.userId = :userId  and e.date >= DATE_SUB(CURRENT_DATE, interval 6 day)")
    long findSumOfLastSevenDaysExpenses(@Param("userId") int userId);

    @Query("Select COALESCE(SUM(e.amount), 0) from Expense e inner join e.user u where u.userId = :userId and e.date >= DATE_SUB(CURRENT_DATE, interval 30 day)")
    int findSumOfLastOneMonthExpenses(@Param("userId") int userId);

    @Query("Select COALESCE(SUM(e.amount), 0) from Expense e inner join e.user u where u.userId = :userId and e.date >= DATE_SUB(CURRENT_DATE, interval 365 day)")
    int findSumOfLastOneYearExpenses(@Param("userId") int userId);
    



    long lastOneWeekExpenses = (long) expenseDto.getAmount() + this.getSumOfLastSevenDaysExpenses(expenseDto.getUserId());
            long lastOneMonthExpenses = (long) expenseDto.getAmount() + this.getSumOfLastOneMonthExpenses(expenseDto.getUserId());
            long lastOneYearExpenses = (long) expenseDto.getAmount() + this.getSumOfLastOneYearExpenses(expenseDto.getUserId());

            List<Budget> budgets = budgetRepository.findBudgetsByUserId(expenseDto.getUserId());

            for (Budget budget : budgets) {
                
                if(String.valueOf(budget.getBudgetType()).equalsIgnoreCase("WEEKLY") && lastOneWeekExpenses > (long) budget.getBudgetAmount()) {
                    returnMessage = "You've surpassed your weekly budget limit";
                    break;
                }
                else if(String.valueOf(budget.getBudgetType()).equalsIgnoreCase("MONTHLY") && lastOneMonthExpenses > (long) budget.getBudgetAmount()) {
                    returnMessage = "You've surpassed your monthly budget limit";
                    break;
                }
                else if(String.valueOf(budget.getBudgetType()).equalsIgnoreCase("YEARLY") && lastOneYearExpenses > (long) budget.getBudgetAmount()) {
                    returnMessage = "You've surpassed your yearly budget limit";
                    break;
                }
            }




            public long getSumOfLastSevenDaysExpenses(int userId) {

        return expenseRepository.findSumOfLastSevenDaysExpenses(userId);
    }

    public long getSumOfLastOneMonthExpenses(int userId) {

        return expenseRepository.findSumOfLastOneMonthExpenses(userId);
    }

    public long getSumOfLastOneYearExpenses(int userId) {

        return expenseRepository.findSumOfLastOneYearExpenses(userId);
    }